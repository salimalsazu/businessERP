version: "3.8"

services:
  postgres:
    image: postgres:latest
    container_name: postgres
    hostname: postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: salimalsazu
      POSTGRES_DB: erp
    volumes:
      - type: bind
        source: /root/volumes/erp/db
        target: /var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - web

  server:
    stdin_open: true
    build:
      context: ./server
      dockerfile: Dockerfile
    image: server:latest
    container_name: server-container
    depends_on:
      - postgres
    ports:
      - 7000:7000
    volumes:
      - type: bind
        source: /root/volumes/erp/data
        target: /app/uploads
    networks:
      - web

  client:
    stdin_open: true
    build:
      context: ./client
      dockerfile: Dockerfile
    image: client:latest
    container_name: client-container
    depends_on:
      - server
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.rule=Host(`account.24-7sourcingbd.com`)"
      - "traefik.http.routers.client.entrypoints=websecure"
      - "traefik.http.services.client.loadbalancer.server.port=3000" # Internal port
      - "traefik.http.routers.client.tls.certresolver=myresolver" # Use Let's Encrypt
      - "traefik.http.routers.client.timeout.read=10s" # Read timeout
      - "traefik.http.routers.client.timeout.write=10s" # Write timeout
    restart: unless-stopped
    networks:
      - web

  backup-service:
    build:
      context: ./backup-service
    container_name: backup-service
    volumes:
      - type: bind
        source: /var/backups
        target: /backup
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - web

networks:
  web:
    external: true # Ensure this matches your Traefik compose file
